{"meta":{"title":"JoruaChan技术博客","subtitle":"永远不甘于现状","description":"","author":"JoruaChan","url":"http://joruachan.cn","root":"/"},"pages":[{"title":"","date":"2021-01-29T15:19:04.855Z","updated":"2021-01-29T15:19:04.855Z","comments":true,"path":"404.html","permalink":"http://joruachan.cn/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2021-03-02T12:38:04.352Z","updated":"2021-03-02T12:38:04.352Z","comments":true,"path":"about/index.html","permalink":"http://joruachan.cn/about/index.html","excerpt":"","text":"「 In me the tiger sniffs the rose;(心有猛虎，细嗅蔷薇) 」 —— Siegfried Sassoon（译自余光中） 笔者诉说如果此时你翻到此页，我是否可以自信地问你一声：是我的博客某方面吸引到你了吧！哈哈，笔者开了个玩笑，一直想要搭建个属于自己的博客，苦于各种原因，或者说自己没有静下心来落实这件事。 在这个“阳光明媚”的夜晚，我坚定地告诉你们，我肯定会努力建设本博客站的！不仅博客，包括我的GitHub项目，我会争取每天、每周更新、发布的！ 如果您有任何建议或者疑问，欢迎在此页进行留言！ 记录博客建设 2020-01-26 域名备案完成 joruachan.cn 终于有了专属于我自己的域名啦，撒花！✿✿ヽ(°▽°)ノ✿ 2021-01-17 初步搭建 是时候觉得应该搭建一个博客了，之前了解过hexo，但是一直没有着手实践；选择了Volantis主题，实践完后，体验非常好。操作简单、搭建方便，并且博客整体样式显得很年轻化，适合我们年老心未老的老年人！哈哈，坚持写作、记录技术！期待我的博客能够越来越火！希望你们能挺我起来！"},{"title":"","date":"2021-03-02T12:38:18.147Z","updated":"2021-03-02T12:38:18.147Z","comments":true,"path":"essay/index.html","permalink":"http://joruachan.cn/essay/index.html","excerpt":"","text":""}],"posts":[{"title":"MySQL统计信息研究","slug":"mysql-stats-info-explore","date":"2021-01-30T16:00:00.000Z","updated":"2021-02-01T16:00:00.000Z","comments":true,"path":"2021-01-31/mysql-stats-info-explore/","link":"","permalink":"http://joruachan.cn/2021-01-31/mysql-stats-info-explore/","excerpt":"","text":"阅读此文，最好事先了解MySQL对SQL语句的执行流程。笔者后续会针对性地补充相关内容，敬请期待！ 统计信息简介了解过SQL语句执行流程的童鞋应该都知道，查询优化器会根据统计信息和代价模型计算每个执行计划的成本大小，从而选择成本最小的执行计划；总而言之，统计信息是决定最终explain所见的执行计划的一个重要因素！ 统计信息分成非持久化统计信息和持久化统计信息；统计信息可由MySQL专门的后台线程dict_stats_thread自动触发更新，也可手动更新； 非持久化统计信息非持久化的统计信息是存在内存中的，数据库重启后会丢失；所以在重启时，大量表会更新统计信息，会对数据库实例造成较大影响； 开启方式：全局变量，针对全局表的默认设置，INNODB_STATS_PERSISTENT = OFF; 或者只针对某个表，在create或者alter时候设置STATS_PERSISTENT = 0; 自动更新 (主要) 场景： 1. 距离上次统计信息更新，表中1/16的数据被修改； 2. innodb_stats_on_metadata=ON的情况下，SHOW TABLE STATUS，SHOW INDEX以及查询INFORMATION_SCHEMA下的TABLES或STATISTICS； 上面说到，非持久化统计信息在数据库重启的时候会大量更新，对数据库造成影响，所以生产上几乎不会采用这种方案； 持久化统计信息持久化的统计信息是存在物理表中的，数据库重启后不会丢失；具体的表为：mysql库下的innodb_index_stats和innodb_table_stats； 开启方式：5.6.6版本后MySQL默认开启持久化统计信，即INNODB_STATS_PERSISTENT = ON； 自动更新（主要）场景： 1. 距离上次统计信息更新，表中1/10的数据被修改； 2. 新建索引，重建索引，truncate； innodb_table_stats表先看下innodb_table_stats表的DDL innodb_table_stats DDL123456789CREATE TABLE `innodb_table_stats` ( `database_name` varchar(64) COLLATE utf8_bin NOT NULL, `table_name` varchar(64) COLLATE utf8_bin NOT NULL, `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, `n_rows` bigint(20) unsigned NOT NULL, `clustered_index_size` bigint(20) unsigned NOT NULL, `sum_of_other_index_sizes` bigint(20) unsigned NOT NULL, PRIMARY KEY (`database_name`,`table_name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin STATS_PERSISTENT=0 字段介绍 database_name: 数据库名称； table_name: 表名称； last_update: 更新时间； n_rows: 表数据的总行数； clustered_index_size: 聚簇索引的总页数； sum_of_other_index_sizes: 非聚簇索引的总页数； 引申介绍聚簇索引：innodb引擎，必须有且只有一个主键，这种索引是将数据和索引存储在一起的，只要找到索引的位置就可以找到行数据；但是通过辅助索引需要经历两次查询，先通过辅助索引找到主键位置，再通过聚簇索引找到数据； 非聚簇索引：myisam引擎，索引和数据是分开存储的，索引的叶子节点指向数据行地址；辅助索引和主键索引以及数据文件都是独立的；myisam通过key_buffer把索引先缓存到内存中，当通过索引访问数据时，在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因； innodb_index_stats表先看下innodb_index_stats表的DDL innodb_index_stats DDL1234567891011CREATE TABLE `innodb_index_stats` ( `database_name` varchar(64) COLLATE utf8_bin NOT NULL, `table_name` varchar(64) COLLATE utf8_bin NOT NULL, `index_name` varchar(64) COLLATE utf8_bin NOT NULL, `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, `stat_name` varchar(64) COLLATE utf8_bin NOT NULL, `stat_value` bigint(20) unsigned NOT NULL, `sample_size` bigint(20) unsigned DEFAULT NULL, `stat_description` varchar(1024) COLLATE utf8_bin NOT NULL, PRIMARY KEY (`database_name`,`table_name`,`index_name`,`stat_name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin STATS_PERSISTENT=0 字段介绍 database_name: 数据库名称； table_name: 表名称； index_name: 索引名称； last_update: 更新时间； stat_name: 统计信息名； stat_value: 统计信息值； sample_size: 采样大小； stat_description: 类型说明； 统计项说明如果翻看innodb_index_stats表数据，你会发现每个索引都会有多个统计项(stat_name)；主要如下： stat_name统计项 stat_value含义 size 索引的页数量 n_leaf_pages 叶子节点的数量 n_diff_pfxNN 索引上唯一值的数量；因为索引可能是多列，所以NN表示从左递增的列组合唯一值的数量；注意如果是普通索引除去自身索引列的统计，还会加上唯一索引列进行统计； 了解stat_name和stat_value的具体含义，可以在解决或者优化慢查询问题上，起到一定的作用。如果统计值远小于实际值，查询优化器基本上不会选择该索引进行查询检索； n_diff_pfxNN举例说明假设表有字段：a、b、c、d、e，唯一索引：uix_a_b_c(a, b, c)， 普通索引：idx_d_e(d, e)；针对唯一索引uix_a_b_c则会有统计项： 1. n_diff_pfx01表示列a上的唯一值数量；2. n_diff_pfx02表示a,b两列组合的唯一值数量；3. n_diff_pfx03表示a,b,c三列组合的唯一值数量；针对普通索引：idx_d_e则会有统计项： 1. n_diff_pfx01表示d列上的唯一值数量；2. n_diff_pfx02表示d, e两列组合的唯一值数量；3. n_diff_pfx03表示d, e, a三列组合的唯一值数量；3. n_diff_pfx04表示d, e, a, b四列组合的唯一值数量；3. n_diff_pfx05表示d, e, a, b, c五列组合的唯一值数量； 手动更新统计信息执行ANALYZE TABLE table_name。注意：执行此语句时，需要保证用户拥有select和insert的权限；执行时，会持有innodb表的readonly锁，从而会短暂导致表的写入、更新、删除操作； 统计信息不准确，怎么办？如我的随笔中，什么？MySQL还有统计信息一说？一文中，有说到生产环境更新了索引，经过执行计划的查看，查询优化器并没有使用新建的索引； 运维查看了统计信息后，发现统计信息不准确，便执行ANALYZE TABLE table_name刷新了统计信息，便可以正常使用索引查询了。 所以，我们来整理下，如果发现索引没有正常被使用，发现和解决问题的大致思路。如有不适当的地方，欢迎大家留言点拨和斧正！ 第一步：检查索引是否建立起来，如果这步都漏了，是得好好反思下了； 第二步：索引正常建立，查询还是很慢，则查看执行计划，判断索引是否正常被使用；如果没被使用则走第三步，被使用了则走第四步； 第三步：索引正常建立，但是执行计划没有选择该索引；则查看统计信息，如果统计信息异常，则执行ANALYZE TABLE table_name刷新统计信息；还没有恢复，则调大采样变量大小； 第四步：索引正常建立，执行计划也选择了该索引，在SQL无问题的前提下需要考虑设计方面； 注： 以上步骤建立在SQL没有问题的情况之上！","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://joruachan.cn/tags/MySQL/"}],"author":"Jorua"},{"title":"什么？MySQL还有统计信息一说？","slug":"mysql-stats-info","date":"2021-01-29T16:00:00.000Z","updated":"2021-03-02T12:38:16.223Z","comments":true,"path":"2021-01-30/mysql-stats-info/","link":"","permalink":"http://joruachan.cn/2021-01-30/mysql-stats-info/","excerpt":"","text":"笔者最近在项目上对现有表进行了结构优化，并对一个常用表添加了索引。可谓测试环境玩漂移，生产环境怕翻车啊。上线验证的那一刻，突然发现一个类似报表功能的查询SQL极慢！ 背景说明 故障简查 检查添加索引索引的SQL，查看SQL执行结果，检查DDL。一顿操作后，表象上没看出问题 比较执行计划 连接sit环境执行explain，发现没问题，索引正常用上的。在生产的dbms上执行explain，发现索引没有用上，join查询时全表扫描了 查看MySQL版本 sit和prd环境都是5.7.22版本，看样子也不是版本不同造成的 再次分析 既然MySQL版本也一样，DDL也一样，为啥执行计划就是不一样呢？一边猜测着是不是有什么缓存，一边为了节约发布时间，让运维帮忙先把索引删掉再重新添加下 问题暴露 也许是运维对问题的普遍性或者敏感性，过了两三分钟，没对索引操作便通知我们好了！心里便纳了闷了，运维大牛确实牛啊！咨询了一番，便引出今天的话题了：刷新了统计信息 统计信息研究笔者学识浅薄，未曾了解“统计信息”。特此奉上，统计信息研究！大神勿喷！ 本文为随笔，具体的研究文章见： MySQL统计信息研究https://joruachan.cn/2021-01-31/mysql-stats-info-explore/","categories":[{"name":"随笔","slug":"随笔","permalink":"http://joruachan.cn/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://joruachan.cn/tags/MySQL/"}],"author":"Jorua"},{"title":"纪实:nodejs+hexo+volantis快速构建个人Blog","slug":"fast-build-blog","date":"2021-01-16T16:00:00.000Z","updated":"2021-03-02T12:37:49.091Z","comments":true,"path":"2021-01-17/fast-build-blog/","link":"","permalink":"http://joruachan.cn/2021-01-17/fast-build-blog/","excerpt":"","text":"即使身为一个钢铁直男的技术人，能拥有一个分享自己技术心得和生活分享的小窝，想必是每个技术人都考虑过的事情吧! 笔者这就告诉你一个秘密：只需执行几行命令，改点配置，一个端庄不失典雅的博客网站就能生成好！ 搭建环境简介nodejs + hexo; nodejs的安装本文不再介绍，不熟悉的同学可前往nodejs官网学习并安装；本站选用hexo的volantis主题介绍建站的， hexo提供了330款主题，如有需要，可前往查看其他主题 NodeJshttps://nodejs.org/en/ Hexohttps://hexo.io/ Volantishttps://volantis.js.org/ hexo简介hexo 自称为：快速、简洁且高效的博客框架。 笔者用起来确实还可以，大概介绍下几个特性： 提供了不同的layout，可将文章存为草稿，需要时publish即可； 可维护全局的数据，在source/_data文件夹下添加yaml文件，通过site.data获取； 可指定文件的特有变量，通过Front-matter实现； 支持模板，在scaffolds文件夹下可自定义模板，并进行发布； 支持标签插件，可以在文章文件中使用标签%%来插入特定内容； 提供命令行操作，如：hexo init初始化项目、hexo new新建文章、hexo pulish发布草稿文件、hexo generate生成静态文件、hexo server启动服务器； hexo搭建博客步骤 前提是必须安装好git和nodejs； 执行 “npm install -g hexo-cli”，安装好hexo； 选定文件夹，通过 “hexo init $folder” 初始化一个名为 $folder 的文件夹； cd $folder, 再执行npm install，至此hexo的博客框架已经搭建完成！ 完成上述步骤后，可执行hexo server, 访问http://localhost:4000, 会发现一个HelloWorld页面已经可以访问！ 选用volantis主题 设置项目使用的主题: 项目根目录下的_config.yml文件中设置 theme: volantis; 如果Hexo版本在5.0.2及以上，可以直接通过npm i hexo-theme-volantis进行安装；笔者为了项目的可读性，采用了源代码拷贝到theme文件夹的方案（记得删除.git文件夹,否则git提交时会出问题!） 按照依赖的插件：npm i hexo-generator-search hexo-generator-json-content(站内搜索)，npm i hexo-renderer-stylus（Stylus 渲染器） 完成上述步骤后执行hexo server, 访问http://localhost:4000, 是不是发现端庄不失典雅的博客网站已经完成了！ 尝试新建文章执行 hexo new post $newPostName，会在_post文件夹下新建一个名为$newPostName的md文件，一个新的文章便建立完成。 这时你只需要关注你的博文输出即可啦！ 发布至GitHub Pages如果你期望能通过GitHub Pages来访问你的博客网站，做如下几步： 通过GitHub新建一个repository，名为：&lt;你的 GitHub 用户名&gt;.github.io； 本地检出该repository； 在博客源码的项目中执行命令：hexo generate –deploy，会生成public文件夹，该文件夹里便是博客所有的静态页面文件； 将public文件夹中的文件全部拷贝到新建repository的master分支下； 将master文件推送至远程master分支即可！ 静待一会，访问：http://&lt;你的 GitHub 用户名&gt;.github.io便能访问你自定义的博客了！ 如果你有自己的域名，可以在域名解析配置成 记录类型：CNAME，记录值：&lt;你的 GitHub 用户名&gt;.github.io。 注意了！！！ 此时还需要在GitHub Page项目中根目录下加上名为CNAME的文件，文件内容为你自己的域名。 正如你看到的，搭建一个个人博客网站就是如此便捷！ 如果你喜欢的话，点个赞，分享分享下吧！谢谢~","categories":[],"tags":[],"author":"Jorua"}],"categories":[{"name":"随笔","slug":"随笔","permalink":"http://joruachan.cn/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://joruachan.cn/tags/MySQL/"}]}